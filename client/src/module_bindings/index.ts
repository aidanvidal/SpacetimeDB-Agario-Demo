// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit e107144998a2ca83ae87f905ff8a6eb5a50ff504).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { PlayerMoved } from "./player_moved_reducer.ts";
export { PlayerMoved };
import { SpawnFood } from "./spawn_food_reducer.ts";
export { SpawnFood };

// Import and reexport all table handle types
import { FoodTableHandle } from "./food_table.ts";
export { FoodTableHandle };
import { FoodSpawnScheduleTableHandle } from "./food_spawn_schedule_table.ts";
export { FoodSpawnScheduleTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };

// Import and reexport all types
import { Color } from "./color_type.ts";
export { Color };
import { Food } from "./food_type.ts";
export { Food };
import { FoodSpawnSchedule } from "./food_spawn_schedule_type.ts";
export { FoodSpawnSchedule };
import { Player } from "./player_type.ts";
export { Player };
import { Position } from "./position_type.ts";
export { Position };

const REMOTE_MODULE = {
  tables: {
    food: {
      tableName: "food",
      rowType: Food.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: Food.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    food_spawn_schedule: {
      tableName: "food_spawn_schedule",
      rowType: FoodSpawnSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: FoodSpawnSchedule.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: Player.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    client_disconnected: {
      reducerName: "client_disconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    player_moved: {
      reducerName: "player_moved",
      argsType: PlayerMoved.getTypeScriptAlgebraicType(),
    },
    spawn_food: {
      reducerName: "spawn_food",
      argsType: SpawnFood.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.3.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "PlayerMoved", args: PlayerMoved }
| { name: "SpawnFood", args: SpawnFood }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_disconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_disconnected", callback);
  }

  playerMoved(position: Position) {
    const __args = { position };
    let __writer = new BinaryWriter(1024);
    PlayerMoved.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_moved", __argsBuffer, this.setCallReducerFlags.playerMovedFlags);
  }

  onPlayerMoved(callback: (ctx: ReducerEventContext, position: Position) => void) {
    this.connection.onReducer("player_moved", callback);
  }

  removeOnPlayerMoved(callback: (ctx: ReducerEventContext, position: Position) => void) {
    this.connection.offReducer("player_moved", callback);
  }

  spawnFood(arg: FoodSpawnSchedule) {
    const __args = { arg };
    let __writer = new BinaryWriter(1024);
    SpawnFood.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_food", __argsBuffer, this.setCallReducerFlags.spawnFoodFlags);
  }

  onSpawnFood(callback: (ctx: ReducerEventContext, arg: FoodSpawnSchedule) => void) {
    this.connection.onReducer("spawn_food", callback);
  }

  removeOnSpawnFood(callback: (ctx: ReducerEventContext, arg: FoodSpawnSchedule) => void) {
    this.connection.offReducer("spawn_food", callback);
  }

}

export class SetReducerFlags {
  playerMovedFlags: CallReducerFlags = 'FullUpdate';
  playerMoved(flags: CallReducerFlags) {
    this.playerMovedFlags = flags;
  }

  spawnFoodFlags: CallReducerFlags = 'FullUpdate';
  spawnFood(flags: CallReducerFlags) {
    this.spawnFoodFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get food(): FoodTableHandle {
    return new FoodTableHandle(this.connection.clientCache.getOrCreateTable<Food>(REMOTE_MODULE.tables.food));
  }

  get foodSpawnSchedule(): FoodSpawnScheduleTableHandle {
    return new FoodSpawnScheduleTableHandle(this.connection.clientCache.getOrCreateTable<FoodSpawnSchedule>(REMOTE_MODULE.tables.food_spawn_schedule));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
